import argparse
from pdf_gen_helper_functions import *
from docx import Document
from docxcompose.composer import Composer
from docx import Document as Composer_Document
from decouple import config
from WordProposalGenerator import WordProposalGenerator

# Extract the proposal ID command line arg to determine which proposal to generate a PDF for.
parser = argparse.ArgumentParser(description="Generate a PDF given a proposal ID")
parser.add_argument("proposal_id", type=str, help="This str specifies the proposal id to generate.")
parser.add_argument("--coversheet-only", "-c", action="store_true", help="This bool tells the program to produce only the coversheet.")
parser.add_argument("--output-filename", "-o", action="store", help="This argument should be a string which will be the name of the output PDF.")
args = parser.parse_args()
PROPOSAL_ID = args.proposal_id

# All files are accessed via absolute paths specified using this.
PDF_GEN_DIR = validate_path(config("PDF_GEN_DIR"))

# This command is run to invoke the LibreOffice daemon process which converts word documents to PDFs
LIBRE_OFFICE_PYTHON_INSTALLATION_PATH = validate_path(config("LIBRE_OFFICE_PYTHON_INSTALLATION_PATH"), True)
PROPOSALS_BASE_DIR = validate_path(config("PROPOSALS_BASE_DIR"))
PROPOSAL_DIR = validate_path(join(PROPOSALS_BASE_DIR, PROPOSAL_ID))
PDF_UPLOADS_DIR = validate_path(join(PROPOSAL_DIR, "pdf_uploads"))

obj = WordProposalGenerator(PROPOSAL_ID)

obj.get_db_rows("PROPOSAL")
p_type = obj.PROPOSAL_ROW[obj.PROPOSAL_COLS.index("proposal_type")]  # This variable str stores the proposal p_type
c_only = args.coversheet_only
output_name = args.output_filename

###############################################################################
# ------ Generating PDFs from Word Template with WordProposalGenerator ------ #
###############################################################################

if p_type == "Full" or p_type == "Add" or p_type == "CPP" or p_type == "APL":
    print("-GENERATING COVER PAGE-")
    obj.generate_coversheet_page_full()
    print("-GENERATING PROPOSED SITES PAGE-")
    obj.generate_proposed_sites_page()
    if not c_only:
        print("-GENERATING PROPONENTS PAGE-")
        obj.generate_proponents_page()
        print("-GENERATING SITE FORMS-")
        obj.generate_site_forms_full()

elif p_type == "Pre":
    print("-GENERATING COVER PAGE-")
    obj.generate_coversheet_page_full()
    print("-GENERATING PROPOSED SITES PAGE-")
    obj.generate_proposed_sites_page()
    if not c_only:
        print("-GENERATING PROPONENTS PAGE-")
        obj.generate_proponents_page()
        print("-GENERATING SITE FORMS-")
        obj.generate_site_forms_pre()

elif p_type == "SRR":
    print("-GENERATING COVER PAGE-")
    obj.generate_coversheet_page_full()
    print("-GENERATING PROPOSED SITES PAGE-")
    obj.generate_proposed_sites_page()
    if not c_only:
        print("-GENERATING SAFETY REVIEW PREP PAGE-")
        obj.generate_safety_review_prep_page()
        print("-GENERATING SITE FORMS-")
        obj.generate_site_forms_full()

###################################
# ------ THE MERGING STAGE ------ #
###################################

# Merge all Word Documents into a single PDF
print("-MERGING WORD DOCUMENTS-")

# Get the first Word document which is the coversheet.
master = Composer_Document(join(PROPOSAL_DIR, "TEMP_iodp_proposal_pdf_coversheet_template0.docx"))
composer_obj = Composer(master)

# --------- Specify the names of Word templates --------- #

# Get the rest of the coversheet files in the correct order

# If only the coversheet should be generated then exclude the proponents list
if c_only:
    completed_templates = [
        join(PROPOSAL_DIR, "TEMP_iodp_proposal_pdf_coversheet_template1.docx"),
        join(PROPOSAL_DIR, "TEMP_iodp_proposal_pdf_coversheet_template2.docx"),
        join(PROPOSAL_DIR, "TEMP_iodp_proposal_pdf_coversheet_template3.docx"),
        join(PROPOSAL_DIR, "TEMP_iodp_proposal_pdf_coversheet_template4.docx"),
        join(PROPOSAL_DIR, "TEMP_iodp_proposal_pdf_proposed_sites_template.docx"),
    ]

elif p_type == "SRR":  # SRR proposals have the safety review page so their set of templates is a tiny bit different.
    completed_templates = [
        join(PROPOSAL_DIR, "TEMP_iodp_proposal_pdf_coversheet_template1.docx"),
        join(PROPOSAL_DIR, "TEMP_iodp_proposal_pdf_coversheet_template2.docx"),
        join(PROPOSAL_DIR, "TEMP_iodp_proposal_pdf_coversheet_template3.docx"),
        join(PROPOSAL_DIR, "TEMP_iodp_proposal_pdf_coversheet_template4.docx"),
        join(PROPOSAL_DIR, "TEMP_iodp_proposal_pdf_proposed_sites_template.docx"),
        join(PROPOSAL_DIR, "TEMP_iodp_proposal_pdf_safety_review_prep_template.docx")
    ]

# All other drilling proposals have these set of template Word files should be generated by the WordTemplateGenerator.
else:
    completed_templates = [
        join(PROPOSAL_DIR, "TEMP_iodp_proposal_pdf_coversheet_template1.docx"),
        join(PROPOSAL_DIR, "TEMP_iodp_proposal_pdf_coversheet_template2.docx"),
        join(PROPOSAL_DIR, "TEMP_iodp_proposal_pdf_coversheet_template3.docx"),
        join(PROPOSAL_DIR, "TEMP_iodp_proposal_pdf_coversheet_template4.docx"),
        join(PROPOSAL_DIR, "TEMP_iodp_proposal_pdf_proposed_sites_template.docx"),
        join(PROPOSAL_DIR, "TEMP_iodp_proposal_pdf_proponent_list_template.docx")
    ]

# --------- Concatenate all Word templates together into a big Word document --------- #

# Concatenate the other Word template docs to the (now complete) coversheet
for doc in completed_templates:
    if Document(doc).paragraphs:
        master.add_page_break()
    composer_obj.append(Composer_Document(doc))

# Concatenate all the sites together in the correct order and attach them to the previous Word documents
if not c_only:
    for doc in obj.site_file_names:
        if Document(doc).paragraphs:
            master.add_page_break()
        composer_obj.append(Composer_Document(join(PROPOSAL_DIR, doc)))

#########################################################
# ------ THE ACTUAL WORD -> PDF CONVERSION STAGE ------ #
#########################################################

# We have finished concatenating the Word docs together.
print("-CONVERTING WORD TO PDF-")
composer_obj.save(join(PROPOSAL_DIR, "TEMP_final.docx"))

# Run the external tool to perform the singular Word to PDF conversion. The result is a temp file that still need
# to be bookmarked and have user uploads merged in.
docx_convert_word_to_pdf(join(PROPOSAL_DIR, 'TEMP_final.docx'), join(PROPOSAL_DIR, 'TEMP_final.pdf'))

###############################################################
# ------ The User Upload Merging and Bookmarking Stage ------ #
###############################################################

print("-MERGING PDFS-")
with open(join(PROPOSAL_DIR, "TEMP_final.pdf"), 'rb') as infile:
    reader = PdfReader(infile)
    if not c_only:
        # Tell the Word generator object to perform the queries necessary to get the filenames for user uploads that
        # will be merged in.
        if p_type == "SRR":
            obj.get_db_rows("SAFETY_REVIEW_REPORT_FILENAME")
            obj.get_db_rows("SITE_UPLOAD_FILENAMES")

        else:
            obj.get_db_rows("MAIN_TEXT_FILENAME")
            obj.get_db_rows("REFERENCES_FILENAME")
            obj.get_db_rows("CURRICULUM_VITAE_FILENAME")
            obj.get_db_rows("REVIEWERS_FILENAME")
            obj.get_db_rows("SITE_UPLOAD_FILENAMES")

        # --------- Define the document readers for all user uploads that correspond to each proposal p_type --------- #

        # Open all user uploads. If a user upload doesn't exist, rather than crash the program simply print that
        # it wasn't found and proceed.
        if p_type == "Full" or p_type == "CPP":
            user_upload_main_text_reader = instantiate_pdf_reader(PDF_UPLOADS_DIR, obj.MAIN_TEXT_FILENAME, "Main Text")
            user_upload_references_reader = instantiate_pdf_reader(PDF_UPLOADS_DIR, obj.REFERENCES_FILENAME, "References")
            user_upload_cv_reader = instantiate_pdf_reader(PDF_UPLOADS_DIR, obj.CURRICULUM_VITAE_FILENAME, "Curriculum Vitae")
            user_upload_reviewers_reader = instantiate_pdf_reader(PDF_UPLOADS_DIR, obj.REVIEWERS_FILENAME, "Reviewers")

        elif p_type == "Pre":
            user_upload_main_text_reader = instantiate_pdf_reader(PDF_UPLOADS_DIR, obj.MAIN_TEXT_FILENAME, "Main Text")
            user_upload_references_reader = instantiate_pdf_reader(PDF_UPLOADS_DIR, obj.REFERENCES_FILENAME, "References")

        elif p_type == "APL" or p_type == "Add":
            user_upload_main_text_reader = instantiate_pdf_reader(PDF_UPLOADS_DIR, obj.MAIN_TEXT_FILENAME, "Main Text")
            user_upload_references_reader = instantiate_pdf_reader(PDF_UPLOADS_DIR, obj.REFERENCES_FILENAME, "References")
            user_upload_cv_reader = instantiate_pdf_reader(PDF_UPLOADS_DIR, obj.CURRICULUM_VITAE_FILENAME, "Curriculum Vitae")

        elif p_type == "SRR":
            user_upload_main_text_reader = instantiate_pdf_reader(PDF_UPLOADS_DIR, obj.SAFETY_REVIEW_REPORT_FILENAME, "Safety Review Report")

    writer = PdfWriter()
    writer.page_mode = "/UseOutlines"
    cur_i = 0  # "cursor index"
    cur_o = 0  # "cursor offset"

    ids = obj.get_page_identifiers()

    # --------- Merge the PDF pages from the old PDF composed of Word and Bookmark these pages --------- #

    # Merge coversheet, proponents, and proposed sites sheets in.
    if p_type == "SRR" or c_only:
        cur_i, cur_o, _ = docx_bookmark_and_process_pages(reader, writer, "Cover Sheet", cur_i, cur_o,
                                                          ids["coversheet_page_identifier"],
                                                          ids["empty_page_identifier"], None)
        cur_i, cur_o, _ = docx_bookmark_and_process_pages(reader, writer, "Proposed Sites", cur_i, cur_o,
                                                          ids["proposed_sites_page_identifier"],
                                                          ids["empty_page_identifier"],
                                                          ids["proposed_sites_page_continued_identifier"])

    else:
        cur_i, cur_o, _ = docx_bookmark_and_process_pages(reader, writer, "Cover Sheet", cur_i, cur_o,
                                                          ids["coversheet_page_identifier"],
                                                          ids["empty_page_identifier"], None)
        cur_i, cur_o, _ = docx_bookmark_and_process_pages(reader, writer, "Proposed Sites", cur_i, cur_o,
                                                          ids["proposed_sites_page_identifier"],
                                                          ids["empty_page_identifier"],
                                                          ids["proposed_sites_page_continued_identifier"])
        cur_i, cur_o, _ = docx_bookmark_and_process_pages(reader, writer, "Proponent List", cur_i, cur_o,
                                                          ids["proponents_page_identifier"],
                                                          ids["empty_page_identifier"],
                                                          ids["proponents_page_continued_identifier"])

    # --------- Merge the User Uploads In --------- #
    if not c_only:
        if p_type == "Full" or p_type == "CPP":
            cur_o += docx_append_pages(user_upload_main_text_reader, writer, "Main Text", cur_i + cur_o)[0]
            cur_o += docx_append_pages(user_upload_references_reader, writer, "References", cur_i + cur_o)[0]
            cur_o += docx_append_pages(user_upload_cv_reader, writer, "Curricula Vitae", cur_i + cur_o)[0]
            cur_o += docx_append_pages(user_upload_reviewers_reader, writer, "Potential Reviewers", cur_i + cur_o)[0]

        elif p_type == "Pre":
            cur_o += docx_append_pages(user_upload_main_text_reader, writer, "Main Text", cur_i + cur_o)[0]
            cur_o += docx_append_pages(user_upload_references_reader, writer, "References", cur_i + cur_o)[0]

        elif p_type == "APL" or p_type == "Add":
            cur_o += docx_append_pages(user_upload_main_text_reader, writer,"Main Text", cur_i + cur_o)[0]
            cur_o += docx_append_pages(user_upload_references_reader, writer, "References", cur_i + cur_o)[0]
            cur_o += docx_append_pages(user_upload_cv_reader, writer,"Curricula Vitae", cur_i + cur_o)[0]

        elif p_type == "SRR":
            cur_o += docx_append_pages(user_upload_main_text_reader, writer, "Main Text", cur_i + cur_o)[0]

        # --------- Merge Site Template and Site Figures In --------- #
        if p_type == "Full" or p_type == "CPP" or p_type == "APL" or p_type == "Add" or p_type == "SRR":
            for i in range(0, len(obj.SITE_ROWS)):
                obj.get_db_rows("SITE")
                cur_i, cur_o, parent_bookmark = docx_bookmark_and_process_pages(reader, writer, "General Site Information",
                                                                                cur_i, cur_o,
                                                                                ids["site_info_page_identifier"],
                                                                                ids["empty_page_identifier"], None, None,
                                                                                "Site: " +
                                                                                obj.get_general_site_info_tags()['name'][i])
                cur_i, cur_o, parent_bookmark = docx_bookmark_and_process_pages(reader, writer, "Site Survey Detail", cur_i,
                                                                                cur_o, ids["site_survey_detail_identifier"],
                                                                                ids["empty_page_identifier"], None,
                                                                                parent_bookmark)
                cur_i, cur_o, parent_bookmark = docx_bookmark_and_process_pages(reader, writer, "Environmental Protection",
                                                                                cur_i, cur_o,
                                                                                ids["site_env_protection_identifier"],
                                                                                ids["empty_page_identifier"], None,
                                                                                parent_bookmark)
                cur_i, cur_o, parent_bookmark = docx_bookmark_and_process_pages(reader, writer, "Lithologies", cur_i, cur_o,
                                                                                ids["site_lithologies_identifier"],
                                                                                ids["empty_page_identifier"], None,
                                                                                parent_bookmark)

                site_img_name = get_safely(obj.SITE_UPLOAD_FILENAMES, i)
                site_figure = instantiate_pdf_reader(PDF_UPLOADS_DIR, site_img_name)
                cur_o += docx_append_pages(site_figure, writer, "Site Figure", cur_i + cur_o, parent_bookmark, None)[0]

        elif p_type == "Pre":
            obj.get_db_rows("SITE")
            for i in range(0, len(obj.SITE_ROWS)):
                cur_i, cur_o, parent_bookmark = docx_bookmark_and_process_pages(reader, writer, "General Site Information",
                                                                                cur_i, cur_o,
                                                                                ids["site_info_page_identifier"],
                                                                                ids["empty_page_identifier"], None, None,
                                                                                "Site: " +
                                                                                obj.get_general_site_info_tags()['name'][i])

###########################################################
# ------ Write The Result As The Final Output PDF  ------ #
###########################################################
if output_name:
    writer.write(join(PROPOSAL_DIR, output_name))
else:
    writer.write(join(PROPOSAL_DIR, PROPOSAL_ID + ".pdf"))

##############################################
# ------ Clean Up All Temporary Files ------ #
##############################################

print("-------------------------")
print("-PDF GENERATION FINISHED-")
print("-------------------------")

print("-CLEANING UP-")
# Clean up the intermediate files. If the user specified a filename then tell the cleanup function not to delete
# this file since the user might have named it similar to an intermediate file.
if output_name:
    obj.remove_temp_files(exclude_list=[join(PROPOSAL_DIR, output_name)])
else:
    obj.remove_temp_files()
